apiVersion: v1
data:
  main: |
    package katalog.example

    import data.kubernetes.assets

    blockList[output] {
       count(blocked) == 0
       output = {"name":"Allow all URLs!", "action": "None"}
    }

    blockList[output] {
        count(blocked)>0
        output = blocked[_]
    }

    filters[output] {
        count(rule)==0
        output = {"name": "Allow by default", "action": "Allow"}
    }

    filters[output] {
        count(rule)>0
        output = rule[_]
    }

    rule[{"name": "Intrusion not cleared! Redact PII columns", "action": "RedactColumn", "columns": columns}] {
       statusasset := assets[input.request.asset.namespace]["status"]
       statusasset.spec.assetMetadata.tags[_] = "semisafe"
       asset := assets[input.request.asset.namespace][input.request.asset.name]
       columns := [c | asset.spec.assetMetadata.componentsMetadata[i].tags[_] = "PII"; c = i]
    } 

    blocked[{"name": "UNSAFE - block all video end points", "action": "BlockURL"}] {
       asset := input.request.asset.name
       not contains(asset, "api.open511.status")
       not contains(asset, "api.open511.events")
       not contains(asset,"api.traffic_cams")
       asset != "api.token"
       statusasset := assets[input.request.asset.namespace]["status"]
       statusasset.spec.assetMetadata.tags[_] == "unsafe"
    }

    blocked[{"name": "Requested assets does not exist", "action": "BlockURL"}] {
       not assets[input.request.asset.namespace][input.request.asset.name]
    }

    blocked[{"name": "Full access for law-enforcement-agent ", "action": "None"}] {
       input.request.role[_] == "law-enforcement-agent"
    }

    blocked[{"name": "Block video_raw tagged URLs if not law-enforcement-agent", "action": "BlockURL"}] {
       not contains(input.request.role, "law-enforcement-agent")
       asset := assets[input.request.asset.namespace][input.request.asset.name]
       asset.spec.assetMetadata.tags[_] == "video_raw"
    }

    blocked[{"name": "Block video-data-blur if city-analyst", "action": "BlockURL"}] {
       not contains(input.request.role, "city-analyst")
       asset := assets[input.request.asset.namespace][input.request.asset.name]
       asset.spec.assetMetadata.tags[_] == "video_blur"
    }

kind: ConfigMap
metadata:
  creationTimestamp: null
  labels:
    openpolicyagent.org/policy: rego
  name: policy
  namespace: katalog-system

